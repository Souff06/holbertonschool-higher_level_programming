>>> add_integer = __import__('0-add_integer').add_integer

>>> (add_integer(4, 0))
4

>>> (add_integer(4, 1))
5

>>> (add_integer(7, 1.2))
8

>>> (add_integer(3, 2))
5

>>> (add_integer(0, 3))
3

>>> (add_integer(4, "School"))

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 5, in add_integer
TypeError: b must be an integer

>>> add_integer(1, 2, 3)

Traceback (most recent call last):
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Test case where a is not an integer
>>> add_integer('a', 5)
Traceback (most recent call last):
TypeError: a must be an integer

Test case where b is not an integer
>>> add_integer(4, "School")
Traceback (most recent call last):
TypeError: b must be an integer

Test case when we dont't have integer
>>> add_integer("haris")
Traceback (most recent call last):
TypeError: a must be an integer


>>> add_integer()

Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'

>>> add_integer(None, 3)

Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(3, None)

Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(None)

Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(float("inf"), 10)

Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(0, float('nan'))

Traceback (most recent call last):
ValueError: cannot convert float NaN to integer